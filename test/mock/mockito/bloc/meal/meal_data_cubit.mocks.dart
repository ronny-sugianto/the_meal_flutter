// // Mocks generated by Mockito 5.3.2 from annotations
// // in the_meal_flutter/src/core/bloc/meal/meal_data_cubit.dart.
// // Do not manually edit this file.
//
// // ignore_for_file: no_leading_underscores_for_library_prefixes
// import 'dart:async' as _i3;
//
// import 'package:mockito/mockito.dart' as _i1;
// import 'package:the_meal_flutter/src/src.dart' as _i2;
//
// // ignore_for_file: type=lint
// // ignore_for_file: avoid_redundant_argument_values
// // ignore_for_file: avoid_setters_without_getters
// // ignore_for_file: comment_references
// // ignore_for_file: implementation_imports
// // ignore_for_file: invalid_use_of_visible_for_testing_member
// // ignore_for_file: prefer_const_constructors
// // ignore_for_file: unnecessary_parenthesis
// // ignore_for_file: camel_case_types
// // ignore_for_file: subtype_of_sealed_class
//
// class _FakeBaseTheMealRepository_0 extends _i1.SmartFake
//     implements _i2.BaseTheMealRepository {
//   _FakeBaseTheMealRepository_0(
//     Object parent,
//     Invocation parentInvocation,
//   ) : super(
//           parent,
//           parentInvocation,
//         );
// }
//
// class _FakeBaseState_1<T> extends _i1.SmartFake implements _i2.BaseState<T> {
//   _FakeBaseState_1(
//     Object parent,
//     Invocation parentInvocation,
//   ) : super(
//           parent,
//           parentInvocation,
//         );
// }
//
// /// A class which mocks [MealDataCubit].
// ///
// /// See the documentation for Mockito's code generation for more information.
// class MockMealDataCubit extends _i1.Mock implements _i2.MealDataCubit {
//   @override
//   _i2.BaseTheMealRepository get mealRepository => (super.noSuchMethod(
//         Invocation.getter(#mealRepository),
//         returnValue: _FakeBaseTheMealRepository_0(
//           this,
//           Invocation.getter(#mealRepository),
//         ),
//         returnValueForMissingStub: _FakeBaseTheMealRepository_0(
//           this,
//           Invocation.getter(#mealRepository),
//         ),
//       ) as _i2.BaseTheMealRepository);
//   @override
//   _i2.BaseState<List<_i2.Meal>> get state => (super.noSuchMethod(
//         Invocation.getter(#state),
//         returnValue: _FakeBaseState_1<List<_i2.Meal>>(
//           this,
//           Invocation.getter(#state),
//         ),
//         returnValueForMissingStub: _FakeBaseState_1<List<_i2.Meal>>(
//           this,
//           Invocation.getter(#state),
//         ),
//       ) as _i2.BaseState<List<_i2.Meal>>);
//   @override
//   _i3.Stream<_i2.BaseState<List<_i2.Meal>>> get stream => (super.noSuchMethod(
//         Invocation.getter(#stream),
//         returnValue: _i3.Stream<_i2.BaseState<List<_i2.Meal>>>.empty(),
//         returnValueForMissingStub:
//             _i3.Stream<_i2.BaseState<List<_i2.Meal>>>.empty(),
//       ) as _i3.Stream<_i2.BaseState<List<_i2.Meal>>>);
//   @override
//   bool get isClosed => (super.noSuchMethod(
//         Invocation.getter(#isClosed),
//         returnValue: false,
//         returnValueForMissingStub: false,
//       ) as bool);
//   @override
//   void getMealList({String? category}) => super.noSuchMethod(
//         Invocation.method(
//           #getMealList,
//           [],
//           {#category: category},
//         ),
//         returnValueForMissingStub: null,
//       );
//   @override
//   void emit(_i2.BaseState<List<_i2.Meal>>? state) => super.noSuchMethod(
//         Invocation.method(
//           #emit,
//           [state],
//         ),
//         returnValueForMissingStub: null,
//       );
//   @override
//   void onChange(_i2.Change<_i2.BaseState<List<_i2.Meal>>>? change) =>
//       super.noSuchMethod(
//         Invocation.method(
//           #onChange,
//           [change],
//         ),
//         returnValueForMissingStub: null,
//       );
//   @override
//   void addError(
//     Object? error, [
//     StackTrace? stackTrace,
//   ]) =>
//       super.noSuchMethod(
//         Invocation.method(
//           #addError,
//           [
//             error,
//             stackTrace,
//           ],
//         ),
//         returnValueForMissingStub: null,
//       );
//   @override
//   void onError(
//     Object? error,
//     StackTrace? stackTrace,
//   ) =>
//       super.noSuchMethod(
//         Invocation.method(
//           #onError,
//           [
//             error,
//             stackTrace,
//           ],
//         ),
//         returnValueForMissingStub: null,
//       );
//   @override
//   _i3.Future<void> close() => (super.noSuchMethod(
//         Invocation.method(
//           #close,
//           [],
//         ),
//         returnValue: _i3.Future<void>.value(),
//         returnValueForMissingStub: _i3.Future<void>.value(),
//       ) as _i3.Future<void>);
// }
